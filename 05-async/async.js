// Пример простого асинхронного кода - функции setInterval и SetTimeout, так как они вызываются
// не сразу, а по истечении заданного времени
const timeOut = setTimeout(() => console.log("hello"), 3000);
let counter = 0;
const interval = setInterval(() => console.log("hello " + counter++), 3000);
clearTimeout(timeOut);
clearInterval(interval);

//Promise - это возможность дождаться асинхронной операции и потом уже продолжить работу
// с чем либо, что было внутри асинхронности

//Самый простой пример асинхронности
let a = 5;

console.log(a);
// в консоли значение 5

let b = 5;

// имитируем запрос к серверу, где значение b меняется на 100
setTimeout(() => {
  b = 100;
}, 3000);

console.log(b);
// в консоли значение 5, НЕКОРРЕКНОЕ значение, так как функции выполнились последовательно
// и мы не подождали выполнения запросу к серверу
// в этом случае, в js есть Promise - это возможность дождаться асинхронной операции и потом уже продолжить работу
// с чем либо, что было внутри асинхронности

//let promise = new Promise()
// new Promise принимает на вход метод с 2 агрументами (resolve, reject), а тело метода должно содержать тот асинхронный код
// выполнение которого нам нужно дожаться
let promise = new Promise(function(resolve, reject){
    setTimeout(() => {
        resolve(b = 100)
      }, 3000)
})

// промис выполнит код в методе, а метод resolve показывает, что именно нужно дождаться и когда 
// функция resolve запускается - значит все прошло успешно и мы дожались нового значения b

// затем мы обрабатываем промис promise.then(), в аргументы then добавляем функцию, в теле которой
// пишем код, который требовал ожидания, в моем случае вывожу в консоль b дождавшись присвоения ей нового значения

promise.then(function(){
    console.log(b);
})

// Таким образом назначение Promise() - ДОЖДАТЬСЯ, ЗАТЕМ выполнить код ОСТАВИТЬ КОД ЧИТАБЕЛЬНЫМ (избегаем ад колбеков)
